 - app folder is the main folder
 - layout.tsx is the overall wrapper of the project. so we will have navbar,children, footer , ... in this page. we can also change metadata and font from here.
 - page.tsx is the main page. when u go to localhost3000 this page will be appear.
 - in the public folder make another folder "images" and put inside it all the images we need for the project.
 - we should configure our metadata which is in layout.tsx - starting with changing the font - we delete the default font and use {Inter} font style.
 - also we will create a font variable and assign Inter to it and also define text-weight from "100" to "900".
 - change the title and description in metadata function in layout.tsx for SEO purposes.
 - change metadata tag for the project and add some description to it. /layout.tsx
 - we will add background to the layout.tsx in the rootLayout function we will add bg-[#0d0d1f].
 - next we should create a components folder and inside it we create two more components one is helper which includes helper components and the other is Home folder component which we will add our home page related component into it like hero section, service section, contact section and ... .
 - we create a Home.tsx file inside Home folder and create Home component inside it.
 - the we import Home component and add Home component to our page.tsx <Home />
 - we add className="overflow-hidden" to the Home component to prevent any overflow for the Home.tsx .
 - now we start routing in the project . routing let us to have multiple pages.
    localhost:3000/about
    localhost:3000/about/team --> this is a nested route. 
    localhost:3000/about/team/Nima --> this is a dynamic route.

- then we will create aboute folder in the app and inside it we will create page.tsx . this is the place we will implement about page. app/about/page.tsx .
- we make a component inside page.tsx and name it AboutPage. add some style to the text in AboutPage.
- then we will create nested route.
- inside about folder we create another folder named team and inside team we create nested route. we create page.tsx inside team folder and name it TeamPage.tsx . --> app/about/team/page.tsx
- next we will create dynamic route --> app/about/team/[name]/page.tsx .
- we use [name] cause we assume we have a team member which will be search by their names.
- inside [name] we create another page.tsx and inside it we create a component/route and name it TeamDetailsPage.
- To access the dynamic route parameter (which has name), we need to make the TeamDetailsPage component async because we might need to fetch data based on the parameter.
- We receive {params} as an argument (automatically provided by Next.js for dynamic routes), and we can directly access the name from params without using await since params is a regular object, not a Promise.
- we remove all the routing pages because the were just for training purposes.
- now we create Navbar folder. app/Home/Navbar
- inside Navbar we create a Nav component - this for the desktop navigation bar. Home/Navbar/Nav.tsx
- then we create MobileNav.tsx inside Navbar - this os for the side bar menu in the smaller devices. Home/Navbar/MobileNav.tsx
- after that we create another component inside Navbar and we call it ResponsiveNav.tsx - here we will put the functionality to have a responsive navbar. Home/Navbar/ResponsiveNav.tsx .

- then in ResponsiveNav compnent inside the <div> </div> we will add <Nav /> and <MobileNav /> .
- then we will add ResponsiveNav to layout component above the children so all the page have access to this navbar.

- now if we check the browser we see Nav , MobileNav and Home .
- we go to Nav component and add className to it . className= "transtion-all duration-200 h-[12vh] fixed w-full".
- inside the <div></div> in Nav component we will add another <div></div> and add className= "flex items-center w-[90%] h-full justify-between mx-auto " this is the outer container, and inside this <div></div> we will have first our logo container with className="flex items-center space-x-2"
- inside it we will have a Logo Icon Container with className="'w-10 h-10 bg-white rounded-full items-center justify-center flex flex-col"
- inside the last <div> we will have the logo Icon <faCode w-5 h-5 text-black/>.
- now we see the logo icon.
- below the <div> which contains the logo we will add <h1>Nima<h1/> with the following styles -> "text-xl hidden sm:block md:text-2xl text-white font-bold" .
- we create a folder on root and name it constant.
- inside constant folder we create a constant.ts file to keep constants variables inside it.
- inside constant.ts we define variables to prevent repeting styling for every navlinks. we can easily .map through it and apply styling for all the navlinks.

- after defining variables in the constant.ts we go back to the Home/Navbar/Nav.tsx and start to create navLinks.
- we create a <div></div> with className="hidden lg:flex items-center space-x-10" 
- insde the div we will map to our navlinks. {navLinks.map()} we import it from constant.with mapping through navlinks we dont need to apply style for every one of them. we define style once and all of them has it.
- we return a <Link> component and the Link will be coming from our next Link.
- in the <Link> we should first provide a key --> key={link.id} then we will add some properties href={link.url} and apply some className={'text-base hover:text-cyan-300 text-white font-medium transition-all duration-200'}
- then inside a <Link></Link> we will add a <p></p> with our {link.label} -- > <p>{link.label}</p> which is our navbar items.

- After navLinks we have some buttons. 
- we create a <div></div> give some style className='flex items-center space-x-4' to it and inside the div we put our CV button.
- to have the cv button we use a <button></button> tag and give this className tyles to it --> 'px-8 py-3.5 text-sm cursor-pointer rounded-lg bg-blue-800 hover:bg-blue-900 transition-all duration-300 text-white flex items-center space-x-2'
- inside the <button></button> we use <BiDownload /> and add some style to it --> className='w-5 h-5'
- Dont forget we have to first   import { BiDownload } from "react-icons/bi"; otherwise the icon doesnt work.
- after <BiDownload /> we add a span tag and inside span we right what we want to be displayed on the button.
- now we have a Download CV button.

- now we need a hamburger menu. for having this burger menu we will use <HiBars3bottomRight/> from react/icons and give him some style and make it hidden in large screen because its just for small screen --> "lg:hidden"

- its time to implement scroll feature - it change the navbar color when you scroll down.
- first we change the Nav.tsx component to client component by adding ( "use client;" ) at the top of the page .
                                - IMPORTANT : IN NEXTJS EVERY COMPONENT IS SERVER SIDE COMPONENT BY DEFAULT.
- in server components you can not use hooks.

- now in the Nav function we create a stick variable using useState hook. --> const [ navbBg , setNavBg ] = useState(false);
- then we use useEffect hook. --> useEffect(() => {}, []) and we will add an empty dependency array here.
- inside the useEffect body we add a handler function --> const handler = () => {}
- then we add a if statement inside it to check if the window is scrolled more than 90px in y direction --> if(window.scrollY >= 90) and if its true we set our navBg to true and it will show the background.
    --> setNavBg(true)

- below the if statement we will add a eventListener to listen to the scroll event and active our handler function. --> window.addEventListener("scroll", handler);
- dont forget to use a clean-up function in our useEffect hook.
- in the clean-up function we return another function which will removerEventListener --> return () => window.removerEventListener("scroll", handler)

- now in the return section and in the first <div> we should use template litteral because we want to add dynamic classes.
- we use `` instead of "" .
- and we check a condition inside it --> ${navbBg ? 'bg-[#0f142ed9] shadow-md' : 'fixed'}
- to check if its works we will add h-[2000px] in Home.tsx to have a scroll on the screen.
- now its working and we remove the h-[2000px] from Home.tsx

- ** Hamburger menu in mobile view. **
- first we go to overlay in the MobileNav.tsx
- in the <div></div> in the MobileNav we add another <di></di> with the className="fixed insert-0 transform transition-all right-0 duration-500 z-[100002] bg-black opacity-70 w-full h-screen" .
- now if we go to the project and in the small screen we see a overlay on the screen.
- below the div we start adding {/*navlinks*/} section .
- so we add another div with the following className --> 'text-white fixed justify-center flex flex-col h-full transform transition-all duration-500 delay-500 w-[80%] sm:[60%] bg-cyan-800 space-y-6 z-[1000050] right-0'
- after giving class to the div we start doing map through the NavLinks (same as what we earlier have) to have the access to the items of the Navlinks.
    Navlinks.map((link) => { 
        return <Link key={link.id} href={link.url}>
            <p className='text-white w-fit text-xl ml-12 border-b-[1.5px] pb-1 border-white sm:text-[30px]'>{link.label}</p>
          </Link>
    })

- now we have all the items in the navbar under each other .

- next we need the cross(X) icon to close the menu navigation bar .

- inside the div we were working on we start to add cross icon. --> <CgClose className='absolute top-[0.7rem] right-[1.4rem] sm:w-8 sm:h-8 w-6 h-6 '/>