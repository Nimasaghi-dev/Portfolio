 - app folder is the main folder
 - layout.tsx is the overall wrapper of the project. so we will have navbar,children, footer , ... in this page. we can also change metadata and font from here.
 - page.tsx is the main page. when u go to localhost3000 this page will be appear.
 - in the public folder make another folder "images" and put inside it all the images we need for the project.
 - we should configure our metadata which is in layout.tsx - starting with changing the font - we delete the default font and use {Inter} font style.
 - also we will create a font variable and assign Inter to it and also define text-weight from "100" to "900".
 - change the title and description in metadata function in layout.tsx for SEO purposes.
 - change metadata tag for the project and add some description to it. /layout.tsx
 - we will add background to the layout.tsx in the rootLayout function we will add bg-[#0d0d1f].
 - next we should create a components folder and inside it we create two more components one is helper which includes helper components and the other is Home folder component which we will add our home page related component into it like hero section, service section, contact section and ... .
 - we create a Home.tsx file inside Home folder and create Home component inside it.
 - the we import Home component and add Home component to our page.tsx <Home />
 - we add className="overflow-hidden" to the Home component to prevent any overflow for the Home.tsx .
 - now we start routing in the project . routing let us to have multiple pages.
    localhost:3000/about
    localhost:3000/about/team --> this is a nested route. 
    localhost:3000/about/team/Nima --> this is a dynamic route.

- then we will create aboute folder in the app and inside it we will create page.tsx . this is the place we will implement about page. app/about/page.tsx .
- we make a component inside page.tsx and name it AboutPage. add some style to the text in AboutPage.
- then we will create nested route.
- inside about folder we create another folder named team and inside team we create nested route. we create page.tsx inside team folder and name it TeamPage.tsx . --> app/about/team/page.tsx
- next we will create dynamic route --> app/about/team/[name]/page.tsx .
- we use [name] cause we assume we have a team member which will be search by their names.
- inside [name] we create another page.tsx and inside it we create a component/route and name it TeamDetailsPage.
- To access the dynamic route parameter (which has name), we need to make the TeamDetailsPage component async because we might need to fetch data based on the parameter.
- We receive {params} as an argument (automatically provided by Next.js for dynamic routes), and we can directly access the name from params without using await since params is a regular object, not a Promise.
- we remove all the routing pages because the were just for training purposes.
- now we create Navbar folder. app/Home/Navbar
- inside Navbar we create a Nav component - this for the desktop navigation bar. Home/Navbar/Nav.tsx
- then we create MobileNav.tsx inside Navbar - this os for the side bar menu in the smaller devices. Home/Navbar/MobileNav.tsx
- after that we create another component inside Navbar and we call it ResponsiveNav.tsx - here we will put the functionality to have a responsive navbar. Home/Navbar/ResponsiveNav.tsx .

- then in ResponsiveNav compnent inside the <div> </div> we will add <Nav /> and <MobileNav /> .
- then we will add ResponsiveNav to layout component above the children so all the page have access to this navbar.

- now if we check the browser we see Nav , MobileNav and Home .
- we go to Nav component and add className to it . className= "transtion-all duration-200 h-[12vh] fixed w-full".
- inside the <div></div> in Nav component we will add another <div></div> and add className= "flex items-center w-[90%] h-full justify-between mx-auto " this is the outer container, and inside this <div></div> we will have first our logo container with className="flex items-center space-x-2"
- inside it we will have a Logo Icon Container with className="'w-10 h-10 bg-white rounded-full items-center justify-center flex flex-col"
- inside the last <div> we will have the logo Icon <faCode w-5 h-5 text-black/>.
- now we see the logo icon.
- below the <div> which contains the logo we will add <h1>Nima<h1/> with the following styles -> "text-xl hidden sm:block md:text-2xl text-white font-bold" .
- we create a folder on root and name it constant.
- inside constant folder we create a constant.ts file to keep constants variables inside it.
- inside constant.ts we define variables to prevent repeting styling for every navlinks. we can easily .map through it and apply styling for all the navlinks.

- after defining variables in the constant.ts we go back to the Home/Navbar/Nav.tsx and start to create navLinks.
- we create a <div></div> with className="hidden lg:flex items-center space-x-10" 
- insde the div we will map to our navlinks. {navLinks.map()} we import it from constant.with mapping through navlinks we dont need to apply style for every one of them. we define style once and all of them has it.
- we return a <Link> component and the Link will be coming from our next Link.
- in the <Link> we should first provide a key --> key={link.id} then we will add some properties href={link.url} and apply some className={'text-base hover:text-cyan-300 text-white font-medium transition-all duration-200'}
- then inside a <Link></Link> we will add a <p></p> with our {link.label} -- > <p>{link.label}</p> which is our navbar items.

- After navLinks we have some buttons. 
- we create a <div></div> give some style className='flex items-center space-x-4' to it and inside the div we put our CV button.
- to have the cv button we use a <button></button> tag and give this className tyles to it --> 'px-8 py-3.5 text-sm cursor-pointer rounded-lg bg-blue-800 hover:bg-blue-900 transition-all duration-300 text-white flex items-center space-x-2'
- inside the <button></button> we use <BiDownload /> and add some style to it --> className='w-5 h-5'
- Dont forget we have to first   import { BiDownload } from "react-icons/bi"; otherwise the icon doesnt work.
- after <BiDownload /> we add a span tag and inside span we right what we want to be displayed on the button.
- now we have a Download CV button.

- now we need a hamburger menu. for having this burger menu we will use <HiBars3bottomRight/> from react/icons and give him some style and make it hidden in large screen because its just for small screen --> "lg:hidden"

- its time to implement scroll feature - it change the navbar color when you scroll down.
- first we change the Nav.tsx component to client component by adding ( "use client;" ) at the top of the page .
                                - IMPORTANT : IN NEXTJS EVERY COMPONENT IS SERVER SIDE COMPONENT BY DEFAULT.
- in server components you can not use hooks.

- now in the Nav function we create a stick variable using useState hook. --> const [ navbBg , setNavBg ] = useState(false);
- then we use useEffect hook. --> useEffect(() => {}, []) and we will add an empty dependency array here.
- inside the useEffect body we add a handler function --> const handler = () => {}
- then we add a if statement inside it to check if the window is scrolled more than 90px in y direction --> if(window.scrollY >= 90) and if its true we set our navBg to true and it will show the background.
    --> setNavBg(true)

- below the if statement we will add a eventListener to listen to the scroll event and active our handler function. --> window.addEventListener("scroll", handler);
- dont forget to use a clean-up function in our useEffect hook.
- in the clean-up function we return another function which will removerEventListener --> return () => window.removerEventListener("scroll", handler)

- now in the return section and in the first <div> we should use template litteral because we want to add dynamic classes.
- we use `` instead of "" .
- and we check a condition inside it --> ${navbBg ? 'bg-[#0f142ed9] shadow-md' : 'fixed'}
- to check if its works we will add h-[2000px] in Home.tsx to have a scroll on the screen.
- now its working and we remove the h-[2000px] from Home.tsx

- ** Hamburger menu in mobile view. **
- first we go to overlay in the MobileNav.tsx
- in the <div></div> in the MobileNav we add another <di></di> with the className="fixed insert-0 transform transition-all right-0 duration-500 z-[100002] bg-black opacity-70 w-full h-screen" .
- now if we go to the project and in the small screen we see a overlay on the screen.
- below the div we start adding {/*navlinks*/} section .
- so we add another div with the following className --> 'text-white fixed justify-center flex flex-col h-full transform transition-all duration-500 delay-500 w-[80%] sm:[60%] bg-cyan-800 space-y-6 z-[1000050] right-0'
- after giving class to the div we start doing map through the NavLinks (same as what we earlier have) to have the access to the items of the Navlinks.
    Navlinks.map((link) => { 
        return <Link key={link.id} href={link.url}>
            <p className='text-white w-fit text-xl ml-12 border-b-[1.5px] pb-1 border-white sm:text-[30px]'>{link.label}</p>
          </Link>
    })

- now we have all the items in the navbar under each other .

- next we need the cross(X) icon to close the menu navigation bar .

- inside the div we were working on we start to add cross icon. --> <CgClose className='absolute top-[0.7rem] right-[1.4rem] sm:w-8 sm:h-8 w-6 h-6 '/> .
- Now its time to make this feature responsive.
- we convert ResponsiveNav.tsx component to a client component using "use client;"
- inside the function we use useState hook and create state variable --> const [showNav, setShowNav] = useState(false);
- then we create a function handler opeNavHandler which will set our setShowNav(true) and another handler the same as previous one to setShowNav(false);

- now we need to pass these props in our <Nav/> and <Mobile/> --> 
    <Nav openNav={openNavHandler} />
    <MobileNav showNav={showNav} />
- now we need to get this props in our actual component and give them the proper type definition.here is the time typescript come to the picture.
- we go to the Nav.tsx and belolw the imports we will declare type props. we can name it anything.
- we will use props share and here we recieve a openNav which is func that returns void.
  --> type Props = {
    openNav: () => {}
  }

- then we should pass this inside our Nav component --> const Nav = ({openNav}:Props) => {..}
- now when we click on the <HiBars3bottomRight/> burger menu we will call our openNav function --> <HiBars3BottomRight onClick={openNav} />

- now we go to the MobileNav and declare type props.
- inside type declaration we are recieving showNav: boolean and closeNav: () => void which is a function that returns void.
    type Props = {
        showNav: boolean;
        closeNav: () => void;
    }

- now we pass this in our MobileNav function --> const MobileNav = ({closeNav, showNav}:Props) 
- now when we click on the cross icon we should call our closeNav to close the navigation bar. --> onClick={closeNav}

- based on the showNav we will show our sidebar or hide it.
- so in the MobileNav function we create a variable name openNav and here we will check if --> showNav ? "translate-x-0" : "translate-x-[100%]"
- now we need to add openNav o our Navlinks and overlay also.
- so because it is dynamic value we will convert className to template litteral.
- then we will add navOpen ---> ${navOpen}
- now responsivnes working properly


---------- Hero Section ------------
- inside Home folder we will make a folder Hero and inside HEro we make a file Hero.tsx .
- then we create a component boiler plate .
- now we add Hero.tsx in our Home.tsx .
- in the Hero.tsx we create a div and give this className to it --> 'relative h-screen flex items-center justify-center text-white overflow-hidden flex-col'
- inside the div we create another div with the following className --> 'relative z-10 flex flex-col items-center'
- inside the second div we add an <Image /> and assign the following properties to it --> width={150} height={150} className='rounded-full border-8 border-[#0c0c48aa]'
- now we can see the photo at the middle of the hero section.

- in the Hero.tsx below the Image tag we will add an H1 with a span tag inside it.
- we give the h1 the following className --> "tex-2xl sm:text-4xl md:text-5xl lg:text-6xl mt-6 text-center font-bold tracking-wider"
- now we give the span also className --> 'text-cyan-200'
- for the span tag text we want to have a text-effect . so we need to install a package "type writer from npm"
- before going further we should change the component to a client side component.
- then we import typewriter  --> import Typewriter from 'typewriter-effect'.
- after that we should use Typewriter tag inside the span tag.
- then we use the Typewriter tag properties to have a strings , which starts automatically and it shows repetedly(loop) dealy set a delay on showing the new    string, deleteSpeed is the speed of removing words and wrapperClassName is says 2px padding from left  . --> 
        <Typewriter 
            options={{
                strings:[
                    'Frontend Developer',
                    'Backend Developer',
                    'Web Developer'
                ],
                autoStart: true,
                loop: true,
                delay: 75,
                deleteSpeed: 50,
                wrapperClassName: "pl-2",
        }} />



- to apply some nice animation effect to the logo and name we will install framer from npm.
- then import motion from "framer-motion" --> import { motion } from "framer-motion";
- I wrapped the logo+name group in a motion.div and used initial/animate/transition to gentle fade/slide to guide the eye without being flashy.
        <motion.div 
          className="flex items-center space-x-2"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >

- then for the logo add Hover/tap interaction I used whileHover with a spring transition so the logo feels “real” (snappy, not robotic).
        <motion.div
            whileHover={{ rotate: 360, scale: 1.1 }}
            transition={{ type: "spring", stiffness: 120, damping: 10 }}
            >
            <BiAtom className="w-5 h-5 text-black" />
        </motion.div>

- then add delay effect to the name , The name appears just after the logo using a small delay and also add rhythm. The color shift to cyan on hover matches our palette.
        <motion.h1
            initial={{ opacity: 0, x: -15 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5, duration: 0.7 }}
            whileHover={{ scale: 1.05, color: "#22d3ee" }}
            >
            Nima
        </motion.h1>


i used the code below to :
- Keep it accessible & performant

- Only animate opacity/transform (GPU-accelerated).

- Keep durations ~0.6–0.8s (feels modern).

- If you want to be extra considerate, you can adapt to users who prefer reduced motion

    import { useReducedMotion } from "framer-motion";
    const reduce = useReducedMotion();
// then conditionally avoid rotation if reduce === true



-- install lucide-react from npm to have a new logo
- first import it --> import { Code2 } from "lucide-react";
- then replace <Code2/> it with <BiAtom/>


---------- SEE MY WORK BUTTON -------------
- now its time to implement see my works button.
- in the hero.tsx after <h1></h1> tag we create a <button></button>
- and assign the following className to it --> 'mt-6 px-10 py-4 bg-blue-800 hover:bg-blue-900 transition-all duration-300 cursor-pointer rounded-full text-lg font-medium'
- inside the <button></button> we add a <span>See My Works</span>.
- below the <span></span> we add <BsArrowRight /> from react/icon . --> <BsArrowRight className='w-5 h-5 ml-2 inline-block'/>
- now we have a button below the <h1></h1> tag 


----------- Add Particles background ------------
- instal npm package for particles @tsparticles/react  / slim / engine
- download the prepared code from the source code and add it to the project.
- then add the component <ParticlesHero /> to the Hero.tsx under the first div in the return statement.

----------- Resume Section ------------
- first we create a folder in components/Home/Resume and inside the folder create a Resume.tsx
- after creating the component we add it in our Home.tsx under <Hero/> component. --> <Resume />
- then in the Resume.tsx we give the first <div> following className --> "pt-20 pb-16"
- inside the first <div></div> we add another <div></div> and give ot the following  --> "w-[90%] sm:w-[70%] mx-auto grid grid-cols-1 xl:grid-cols-2 gap-10"
- inside the second <div> is dedicated to {/* work experiments */} so we create a <div> for the work experiments section.
- we create the same section also for {Education}

- to have the information of Education and experiences we should create another compnent ResumeCard.tsx .
- in the Resume/ResumeCard.tsx we create a component boiler plate for ResumeCard.tsx
- back to Resume.tsx and in the work experiences section we will add <h1>My Work <span>Experiences</span></h1>
- we will add some style to the h1 and span --> <h1 className="text-3xl sm:text-4xl font-bold text-white">My Work <span className="text-cyan-200">Experiences</span></h1>
- below the <h1></h1> we create a <div className="mt-10"></div> 
- inside the div we will use a ResumeCard. Dont forget to import the component ResumeCard.tsx
- inside <ResumeCard /> we will pass props to have a react icon --> <ResumeCard Icon={faCodepen}/> and also another porps to have role title 
    <ResumeCard Icon={FaCodepen} role="Full Stack Developer" />
- now we need to recieves those props .
- in the ResumeCard.tsx at the top we create a type for Props 
        type Props = {
            Icon: IconType;
            role: string;
            date?: string;  --------> ? means it is optional you can use it or not.
        }
- for the Icon we need to import it from react/icons --> import { IconType } from "react-icons";
- the date is for education section . because we are using the same ResumeCard for the Education section.

- then we should pass our Props to the ResumeCard component --> const ResumeCard = ({Icon, role, date}: Props) => { ...
- now we give style to the div inside the ResumeCard component --> mb-6
- inside the first <div></div> we add another div -- > <div className="flex items-start space-x-6 bg-blue-950/20 transition-all duration-300 p-4 sm:p-8 rounded-md"></div>
- and we add another div inside the last one. --> <div className="sm:w-14 sm:h-14 w-10 h-10 bg-blue-950 rounded-full flex items-center justify-center flex-col"></div>
- iside the <div></div> we add <Icon className="sm:w-8 sm:h-8 w-6 h-6 text-white" /> . to have the icon in the ResumeCard .

- i change the logo and add sth else from react-icons .

- after the last div which contains Icon we add another <div className="flex-1"></div> which is responsible to check if we have {date} and show it .
        <div className="flex-1">
            {date && (
                <h1 className="mb-2 sm:px-6 sm:py-1.5 px-4 py-1 rounded-full bg-gray-200 text-gray-600 w-fit sm:text-lg text-sm font-bold">{date}</h1>
            )}
        </div>

- after the {date} inside the div we add another h1 for {role} --> <h1 className="text-gray-200 text-xl sm:text-2xl font-semibold">{role}</h1>
- below the h1 we add a <p className="text-gray-200 text-sm sm:text-base pt-3"></p> which contains info about the role.

-- in Resume.tsx in the education section we add -->
         <h1 className="text-3xl sm:text-4xl font-bold text-cyan-200 ">
            Education
        </h1>

- below the h1 we add one more time <ResumeCard Icon={} /> but we change the icons.


--------- Project Section ---------
- to build this section we should create a folder Home/Projects/Projects.tsx
- then we create a component boilerplate and then add it to our Home.tsx -->    <Project />
- in the Project.tsx we create a div and give this className="pt-16 pb-16"
- inside the div we add a <H1> --> 
        <h1 className='text-center text-2xl md:text-4xl xl:text-5xl font-bold text-white'>
            Recent <span className='text-cyan-300'>Projects</span>
        </h1>

- below the h1 we create another div --> className='width-[70%] mx-auto grid grid-cols-1 md:grid-cols-2 gap-10 mt-16'
- inside the last div we add another div which contains <Image /> --> <Image src='/images/NomNom-menu.png' alt='img' width={800} height={650} className='rounded-lg' />
- now we have our first image.
- after the Image tag we add h1 which is responsible to show a short info about the project.
    <h1 className='mt-4 text-xl sm:text-2xl font-semibold text-white'>Food ordering application - <span className='text-cyan-300'>NOMNOM</span></h1>
- below the h1 we add another h1 which is responsible to show some other info about the project but smaller with different color.
    <h1 className='pt-2 font-medium text-white/80'>MERN stack - Team Project</h1>
- now its time to add 3 more projects. we copied the code from the first photo since it is the same process.


------------- Skills Section -------------
- we create folder inside Home --> Home/Skills/Skills.tsx
- create Skills boilerplate and add it in Home.tsx
- then in the skills.tsx above the component we create skill array of object.
- this array will contains languages we know like Javascript , react , ...
    const skills = [
        {
            name:'Javascript',
            icon:<SiJavascript />,
        }
    ]
- it has two properties name and icon . we import icon from react-icons/si .
- we will copy this object as much as we need.
- then in the first div we add className --> 'text-white pt-16 pb-16
- inside the div we will have h1 tag.
    <h1 className='text-center text-2xl md:text-4xl xl:text-5xl font-bold text-white'>My <span className='text-cyan-300'>skills</span></h1>
- next below the h1 we add a <div></div>
- inside this div we want loop through each skills --> 
        <div className='flex flex-wrap justify-center gap-6 mt-16'>
            {skills.map(() => {
                return 
            })}
        </div>

- then we need to use npm package (react-parallax-tillt) to have 3d effect for each skill . npm i react-parallax-tilt
- after installing we should import the package to Skills.tsx
- then we should return a Tilt component --> return <Tilt key={skill.name} scale={1.5} transitionSpeed={400}></Tilt>

                    Dont forget we need to convert the Skills.tsx to a client component 'use client'

- then inside <Tilt> we will have a div with the className of ---> 'bg-[#14134145] text-center w-40 h-48 rounded-3xl flex flex-col items-center justify-center shadow-lg transition hover:scale-105'
- inside the last div we add another div --> className='text-5xl mb-4 text-gray-300' this div will contains {skill.icon}
- below the div we add a <p></p> and inside it {skill.name} --> <p className='text-white mt-1'>{skill.name}</p>


------------- Contact info Section --------------
- we create a folder inside Home and we name it contact --> Home/Contact
- inside this we create Contact.tsx --> Home/Contact/Contact.tsx
- inside Contact.tsx we create a component biolerplate
- Then we add the Contact.tsx component to our Home.tsx because we need to render it.
- inside the Contact.tsx we add className='pt-16 pb-16'
- inside the first div we create another <div></div> --> className='w-[90%] md:w-[80%] lg:w-[70%] mx-auto grid grid-cols-1 lg:grid-cols-2 gap-10 items-center'
- we will devide the space in 2 part one for the text content and one for the form.
- for the first part {/* Text content */} we create a div and inside the div we have a H1 --> <h1>Schedule a call with me to see if i can help</h1>
- h1 will have some className -->    'text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-200'
- below the H1 we add a <p></p> which includes subheading. --> <p className='text-gray-400 mt-5 text-base sm:text-lg'>Reach out to me today</p>
- Next we should add mobile number , email Adress and Location .
- after the <p></p> we will have a <div></div>. className="mt-7" .
- inside the last div we have another div --> className='flex items-center space-x-3 mb-4'
- inside the div we have an icon - envelop icon to show email. -->  <BiEnvelope className='w-9 h-9 text-cyan-300' />
- Below the <BiEnvelope /> we will add a <p></p> which contains the eamil Adress.
- we copy the div which includes <BiEnvelope/> for the mobile number and Map (Adress)
- 
