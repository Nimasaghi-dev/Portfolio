 - app folder is the main folder
 - layout.tsx is the overall wrapper of the project. so we will have navbar,children, footer , ... in this page. we can also change metadata and font from here.
 - page.tsx is the main page. when u go to localhost3000 this page will be appear.
 - in the public folder make another folder "images" and put inside it all the images we need for the project.
 - we should configure our metadata which is in layout.tsx - starting with changing the font - we delete the default font and use {Inter} font style.
 - also we will create a font variable and assign Inter to it and also define text-weight from "100" to "900".
 - change the title and description in metadata function in layout.tsx for SEO purposes.
 - change metadata tag for the project and add some description to it. /layout.tsx
 - we will add background to the layout.tsx in the rootLayout function we will add bg-[#0d0d1f].
 - next we should create a components folder and inside it we create two more components one is helper which includes helper components and the other is Home folder component which we will add our home page related component into it like hero section, service section, contact section and ... .
 - we create a Home.tsx file inside Home folder and create Home component inside it.
 - the we import Home component and add Home component to our page.tsx <Home />
 - we add className="overflow-hidden" to the Home component to prevent any overflow for the Home.tsx .
 - now we start routing in the project . routing let us to have multiple pages.
    localhost:3000/about
    localhost:3000/about/team --> this is a nested route. 
    localhost:3000/about/team/Nima --> this is a dynamic route.

- then we will create aboute folder in the app and inside it we will create page.tsx . this is the place we will implement about page. app/about/page.tsx .
- we make a component inside page.tsx and name it AboutPage. add some style to the text in AboutPage.
- then we will create nested route.
- inside about folder we create another folder named team and inside team we create nested route. we create page.tsx inside team folder and name it TeamPage.tsx . --> app/about/team/page.tsx
- next we will create dynamic route --> app/about/team/[name]/page.tsx .
- we use [name] cause we assume we have a team member which will be search by their names.
- inside [name] we create another page.tsx and inside it we create a component/route and name it TeamDetailsPage.
- To access the dynamic route parameter (which has name), we need to make the TeamDetailsPage component async because we might need to fetch data based on the parameter.
- We receive {params} as an argument (automatically provided by Next.js for dynamic routes), and we can directly access the name from params without using await since params is a regular object, not a Promise.